<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>danni&#39;s Blog</title>
  
  <subtitle>A blog that you won&#39;t read.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://cheerforever.github.io/"/>
  <updated>2019-11-24T09:06:48.000Z</updated>
  <id>http://cheerforever.github.io/</id>
  
  <author>
    <name>danni</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>批判性思维工具与费曼学习法实践</title>
    <link href="http://cheerforever.github.io/2019/11/24/%E6%89%B9%E5%88%A4%E6%80%A7%E6%80%9D%E7%BB%B4%E5%B7%A5%E5%85%B7%E4%B8%8E%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95%E5%AE%9E%E8%B7%B5/"/>
    <id>http://cheerforever.github.io/2019/11/24/%E6%89%B9%E5%88%A4%E6%80%A7%E6%80%9D%E7%BB%B4%E5%B7%A5%E5%85%B7%E4%B8%8E%E8%B4%B9%E6%9B%BC%E5%AD%A6%E4%B9%A0%E6%B3%95%E5%AE%9E%E8%B7%B5/</id>
    <published>2019-11-24T03:50:56.000Z</published>
    <updated>2019-11-24T09:06:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>回忆我漫长的学生时代(<del>其实也并不漫长</del>)，学习成绩最高光时刻好像感觉自己并没有比别人多努力成绩就自然地进步了<del>我真是不怕被打</del>。后来想想可能那时候自己无意间使用了一种高效又适合自己的学习方法。</p><p>本文尝试结合现阶段的学习过程总结一下现在使用的学习方法。希望也能帮助自己理清思路，更有效的利用时间来充实自己。嘻嘻。</p><a id="more"></a><h1 id="怎样才算真正拥有了知识？"><a href="#怎样才算真正拥有了知识？" class="headerlink" title="怎样才算真正拥有了知识？"></a>怎样才算真正拥有了知识？</h1><blockquote><p>在斋藤孝的《学会学习》一书中，把学习过程拆解成了三个部分：<strong>输入、处理和输出。</strong></p><p><strong>输入的重点是把知识理解透彻；处理是把知识内化成自己的本领；输出是为了检验学习成果。</strong></p></blockquote><p>但实际情况下，在学习过程中还有一个灭霸级对手在阻挠我们拥有知识，那就是<strong>遗忘</strong>。</p><h1 id="为什么学过的知识总是记不住？"><a href="#为什么学过的知识总是记不住？" class="headerlink" title="为什么学过的知识总是记不住？"></a>为什么学过的知识总是记不住？</h1><p>我们平时的记忆过程是：输入的信息在经过人的注意过程的学习后，便成为了人的短时的记忆，再经过进一步强化后成为长时记忆。如果根据艾宾浩斯遗忘曲线的理论，我们学习的知识会按照一定时间规律被部分遗忘。</p><p><strong>根据艾宾浩斯遗忘曲线得到的结果：</strong></p><p>20分后，42%被遗忘掉，58%被记住。</p><p>1小时后，56%被遗忘掉，44%被记住。</p><p>1天后，74%被遗忘掉，26%被记住。</p><p>1周后，77%被遗忘掉，23%被记住。</p><p>1个月后，79%被遗忘掉，21%被记住。</p><p><img src="https://wiki.mbalib.com/w/images/0/02/%E8%89%BE%E5%AE%BE%E6%B5%A9%E6%96%AF%E8%AE%B0%E5%BF%86%E9%81%97%E5%BF%98%E6%9B%B2%E7%BA%BF.jpg" alt="艾宾浩斯遗忘曲线"></p><p>如果按照这样的速度遗忘的话，现在正在学习的我会有多焦虑。想想我正在读的文字，一个月以后可能就彻底从我脑海里消失了。所以，我们需要定期复习自已学习的知识来对抗遗忘曲线，让知识成为我们的长期记忆。</p><p>复习当然不能花费我们太多时间。复习时如果没有使用有效的方法，而只是掏出书本或者笔记再看一遍的话，与学习新知识的时间差不多，那么真是效率极低的复习方式。</p><p>接下来我们在输入阶段和输出阶段尝试一种新的学习思路。</p><h1 id="新知——输入阶段"><a href="#新知——输入阶段" class="headerlink" title="新知——输入阶段"></a>新知——输入阶段</h1><p>刚才提到学习过程的三大阶段，<strong>输入、处理和输出</strong>。我们主要来探究一下输入阶段。</p><p>带着好奇心和对新知识的渴望，我们打开了一本书、讲义或者一篇博文(<del>反正就是你要学的东西</del>)开始将作者的文字一行一行读下来。或许还有个记笔记的好习惯？那么就开始了文章重点的“摘抄”，笔记内容的快速填充，俗称“抄书”。</p><p>这样一套操作下来，刚刚的知识大部分还属于那个作者，我们对知识只做到了“曾经见过”。</p><p><strong>我认为的输入阶段其实可以换个名字，其实就是提问阶段</strong>。学会根据知识点提出关键的问题，可以帮助我们更好的理解知识，也可以让我们不被局限在一种学习的思路下，跳出作者给我们的固定思维方式。</p><p>接下来我要提出一个<strong>批判性思维</strong>的概念，而且在这里我不会详述它的含义。(这个时候或许我们就可以提出<strong>“批判性思维是什么？”</strong>这个问题了，而且现在就可以<strong>跳出</strong>这篇文章，去查查这个词的意思了。不过不要忘记回来… …)</p><h2 id="使用批判性思维来提出问题"><a href="#使用批判性思维来提出问题" class="headerlink" title="使用批判性思维来提出问题"></a>使用批判性思维来提出问题</h2><blockquote><p> 还是简要说下<strong>批判性思维的三个方面</strong>：</p><ul><li>积极主动地利用关键问题的强烈愿望。</li><li>有一套相互关联，环环相扣的关键问题的意识。</li><li>恰如其分的提出和回答关键问题的能力。</li></ul></blockquote><p>结合批判性思维我们能够更好地提出问题，接下来我们来说下提问有哪些技巧和原则，在过程中举个栗子来加深理解。</p><h3 id="学会提问"><a href="#学会提问" class="headerlink" title="学会提问"></a>学会提问</h3><p>在这里总结一些我在《学会提问》一书中学到的观点，书中对如何提问有全面的讲解，现在只列举我认为在学习专业知识方面比较实用的技巧。</p><p>我们举个<strong>javascript面向对象</strong>学习的例子吧，接下来我们开始提问。</p><ul><li><p><strong>找线索</strong></p><p>学习javascript面向对象时大概率会看到这句话“JavaScript的所有数据都可以看成对象”、“一切都是对象”，接下来的知识点通常根据这句话展开。</p><blockquote><p><strong>找线索的关键</strong>：</p><ul><li>“是什么？” ：“所有数据”指的是什么？“对象”是什么？“面向对象”是什么？</li><li>找到结论：本例子其实就是一个结论了。我们利用“因此”、“告诉我们”等关键词判断结论，或结论一般在文章末尾位置。</li><li>找到理由：简单的说就是提出“为什么？”就好了。    </li></ul></blockquote></li></ul><ul><li><p><strong>哪些词语意思不明确</strong></p><p>本例子中的“一切”、“所有”、“都可以”就可以看做意思不明确的词语，我们可以提出“javascript中有哪些概念，是否都满足这个结论？有哪些数据类型，是所有的数据类型都满足这个结论吗？”。这样我们就会尝试了解或者再复习下javascript的数据类型以及相关概念有哪些。</p></li><li><p><strong>找证据</strong></p><p>为了证明结论的可靠性，我们需要为结论找到证据。例如，javascript中的类型满足对象的特性吗？可以像对象一样使用吗？如何使用？为什么是对象而不是其他呢？</p></li></ul><h2 id="提问的好处"><a href="#提问的好处" class="headerlink" title="提问的好处"></a>提问的好处</h2><p>这种提问的输入方法的优势我认为有以下几点：</p><ul><li>更有利于建立自己的知识体系。</li><li>学习过程也是探索的过程，不会有完成学习任务的感觉。</li><li>知识学习的深度完全由自己掌握，不会被学习资料所束缚。</li><li>更有利于知识发散和知识复习巩固。</li></ul><p>过程最后，我们把自己提出的问题找到答案，再看作者是否介绍了自己没有考虑到的知识点来进行补充。我认为把这些问题和解答进行简单的记录非常有必要。只是简单记录就好，因为我们之后还要进入<strong>输出阶段</strong>。</p><h1 id="回顾——输出阶段"><a href="#回顾——输出阶段" class="headerlink" title="回顾——输出阶段"></a>回顾——输出阶段</h1><p>输出阶段我们要使用的主要工具就是伟大的<a href="https://www.zhihu.com/question/20576786" target="_blank" rel="noopener">费曼学习法</a>啦，也是我曾经无意中使用的一种学习方法论。同样在这里只简单介绍费曼学习法的基本理论。</p><blockquote><p><strong>费曼技巧有四个简单的步骤</strong>：</p><ul><li><p>选择一个概念</p></li><li><p>把它教给完全不懂的另外一个人</p></li><li><p>如果卡壳，回到原始材料</p></li><li><p>回顾后简化语言表达（可选择）</p></li></ul></blockquote><p>其中第二步是重点，我们可以在模拟讲授的过程中尝试建立一个思维导图。在这个过程中，我们更容易发现自己还不熟悉或比较模糊的概念。</p><p>我认为费曼学习法更适用于在复习阶段。我们在对知识有一定理解的基础上，才能更好的建立场景去模拟讲授的内容。同时，在回顾知识过程中我们更容易发现哪些知识是已经遗忘了的，哪些知识是一开始就没有搞懂的。</p><h1 id="可调节的学习方法"><a href="#可调节的学习方法" class="headerlink" title="可调节的学习方法"></a>可调节的学习方法</h1><p>学习方法其实没有最好的只有最适合自己的，以上只是我现在正在探索的一种学习方法。为了培养将知识内化到自己知识体系的意识和提升学习效率，我会持续改进自己的学习方法。</p><p>当然现在的方法中还有一些模糊的规则。比如输出阶段的进行周期，现在的标准是回想一下主要知识点，如果有几个想不起来了就可以回顾一下。如果一个都想不起来了的话，那就回顾的太晚了。。。</p><p>另外，在这篇文章的码字过程中我用了<a href="https://zh.wikipedia.org/wiki/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95" target="_blank" rel="noopener">番茄工作法</a>，不得不说效率还是提高了点。咳咳，但是还是不能掩盖我的文章逻辑太乱的事实。。。</p><p>希望今后的文章能够写的越来越棒，给自己打个气(<em>^▽^</em>)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;回忆我漫长的学生时代(&lt;del&gt;其实也并不漫长&lt;/del&gt;)，学习成绩最高光时刻好像感觉自己并没有比别人多努力成绩就自然地进步了&lt;del&gt;我真是不怕被打&lt;/del&gt;。后来想想可能那时候自己无意间使用了一种高效又适合自己的学习方法。&lt;/p&gt;
&lt;p&gt;本文尝试结合现阶段的学习过程总结一下现在使用的学习方法。希望也能帮助自己理清思路，更有效的利用时间来充实自己。嘻嘻。&lt;/p&gt;
    
    </summary>
    
    
      <category term="自我成长" scheme="http://cheerforever.github.io/categories/%E8%87%AA%E6%88%91%E6%88%90%E9%95%BF/"/>
    
    
      <category term="学习方法论" scheme="http://cheerforever.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>《上帝掷骰子吗：量子物理史话》读书笔记</title>
    <link href="http://cheerforever.github.io/2019/10/29/%E3%80%8A%E4%B8%8A%E5%B8%9D%E6%8E%B7%E9%AA%B0%E5%AD%90%E5%90%97%EF%BC%9A%E9%87%8F%E5%AD%90%E7%89%A9%E7%90%86%E5%8F%B2%E8%AF%9D%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://cheerforever.github.io/2019/10/29/%E3%80%8A%E4%B8%8A%E5%B8%9D%E6%8E%B7%E9%AA%B0%E5%AD%90%E5%90%97%EF%BC%9A%E9%87%8F%E5%AD%90%E7%89%A9%E7%90%86%E5%8F%B2%E8%AF%9D%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2019-10-29T13:49:54.000Z</published>
    <updated>2020-01-16T04:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最初是因为看了李永乐老师的一期关于量子力学的视频<a href="https://www.youtube.com/watch?v=6L37Nwffy74" target="_blank" rel="noopener">薛定谔的猫与平行宇宙到底怎么回事？李永乐老师7分钟讲解量子力学</a>，觉得很有意思(我向来对这种神乎其技的事情感兴趣~)。</p><p>在这里插一句吼，真的墙裂推荐李永乐老师的视频，总能带我打开新世界的大门。不能fq的话，在B站上也能找到他哦~</p><p>咳咳，决心充实一下自己薄弱知识面的我决定仔细<del><em>装模作样</em></del>研读一下这本书，看看高大上的量子力学到底是啥东西~~</p><a id="more"></a><p><img src="https://img3.doubanio.com/view/subject/l/public/s1486674.jpg" alt=""></p><p>豆瓣上搜索这本书的简介，明晃晃的写着:</p><blockquote><p>“——这本书适合任何有中学基本物理概念的读者。”</p></blockquote><p>书里面经常抛出一两个公式，作者会善意的安慰你看不懂也没关系哈，不过还是有种智商被侮辱的赶脚（<del><em>毕竟我的中学物理学的稀烂</em></del>）。不过作者并没有把量子物理发展史讲的枯燥乏味，清晰的逻辑还有对不同时期的天才科学家的生活描写，让我觉得这更像一本科普类型的小说？</p><p>先来张天才大合照，被趣称为“集中了全人类<em>三分之一</em>的智慧”的<strong>索尔维会议</strong>。这次会议作为在量子发展史上诸多重大事件之一，成功把量子问题推到了历史最前沿。(放张图单纯是因为觉得薛定谔的颜值还是蛮高的。。。)</p><p><img src="http://www.dodobook.com/bookimages/shijiandexingzhuang/00044.jpg" alt=""></p><blockquote><p>印象比较深刻的是“人择原理”(anthropic principle)也叫<strong>“参与性宇宙”模型</strong>，说明了我们存在这个事实本身，决定了宇宙的某些性质为什么是这样的而不是那样的。类似于“我思故我在”。</p><p>一件事物的存在需要发现和提出问题的人，如果没有人来问“宇宙为什么是这样的？”，那么宇宙的种种性质也相当于不存在。</p><p>因此产生的逻辑循环：如果没有宇宙创造人，也不会有人发现宇宙。这种事件也叫作“自指”或者“自激活”。(想起之前看的一部电影《前目的地》，讲了一个”自己“和”自己“生下了”自己“的故事？？？)</p><p>我想这个观点同样可以证明死亡是人意识的湮灭，而意识才是生命的载体。</p></blockquote><p><strong><em>什么是意识？</em></strong></p><p>书中对意识的解释，类比了什么是信息。一个消息是一种信息，但是，它的载体本身并非信息，它所蕴涵的内容才是。同样一条信息，可以通过不同载体表达出来。</p><p>我们的意识组成脑的原子群的一种“组合模式”，正因为有了意识，我们的脑才和“石头”有了区别。我们的意识是完全建立在我们的脑的结构模式之上的。</p><p>如果复制我们的意识，那么这个“复制人”是否就是本人呢？比如我们复印一份文件，能不能说新的这份文件和原版的是同样一份文件呢？</p><p><strong><em>图灵实验</em></strong></p><p>之前看的一部《机械姬》，讲了一个老板找来公司的一个程序员来给自己创造的机器人做图灵实验，结果两人都被机器人反杀的故事(有些后怕，程序员安心搬砖不好的吗？)。</p><p>”图灵实验“是一种判定计算机能否像人那般“思考”的标准。如果计算机能够使人感受不到计算机与真人的区别，那么就可以判定计算机和人一样具备思考的能力。</p><p>如果把意识看做一种模式的话，我认为这种模式肯定是可以创造和可复制的。例如《盗梦空间》中尝试在大脑中植入一个想法，这个想法如果是一段意识信息的话，那么这样的尝试就是有可能的。</p><blockquote><p>一个有意思的悖论：</p><p>一粒沙落地不算一个沙堆，两粒沙落地不算一个沙堆，但十万粒沙落地肯定是一个沙堆了。那么，具体到哪一粒沙落地时才形成一个沙堆呢？</p><p>确实想到头痛。。。吃一口汉堡可能还不会变胖，但到底吃到第几口我会长胖呢？到那口我就不吃了。。。</p><p>生气的是，科学家不屑于研究这种模糊性的问题。。。这让世界上此时又多了一个胖子。</p></blockquote><p>有空还是要重新刷一下这本书比较好，好多理论都忘记了。不光作为一本科普读物，思考一些人生哲理也不错？？</p><p>希望下次更新学习相关的读书笔记，看起来没那么不务正业。</p><p>额，还是先修复我的评论系统再说吧？！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最初是因为看了李永乐老师的一期关于量子力学的视频&lt;a href=&quot;https://www.youtube.com/watch?v=6L37Nwffy74&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;薛定谔的猫与平行宇宙到底怎么回事？李永乐老师7分钟讲解量子力学&lt;/a&gt;，觉得很有意思(我向来对这种神乎其技的事情感兴趣~)。&lt;/p&gt;
&lt;p&gt;在这里插一句吼，真的墙裂推荐李永乐老师的视频，总能带我打开新世界的大门。不能fq的话，在B站上也能找到他哦~&lt;/p&gt;
&lt;p&gt;咳咳，决心充实一下自己薄弱知识面的我决定仔细&lt;del&gt;&lt;em&gt;装模作样&lt;/em&gt;&lt;/del&gt;研读一下这本书，看看高大上的量子力学到底是啥东西~~&lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://cheerforever.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="读书笔记" scheme="http://cheerforever.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>了解CSS原生变量</title>
    <link href="http://cheerforever.github.io/2019/10/28/CSS%E5%8F%98%E9%87%8F%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>http://cheerforever.github.io/2019/10/28/CSS%E5%8F%98%E9%87%8F%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2019-10-28T15:02:50.000Z</published>
    <updated>2019-11-20T14:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做项目换肤功能的过程中，早在项目初期了解的<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties" target="_blank" rel="noopener">CSS变量</a>终于派上了用场，不得不感叹这真是有意义的发明。本文将总结一下CSS变量的原理与使用方法。</p><h1 id="CSS变量简介"><a href="#CSS变量简介" class="headerlink" title="CSS变量简介"></a>CSS变量简介</h1><blockquote><p><strong>CSS变量</strong>（CSS Variable）又叫 <strong>CSS 自定义属性</strong>（CSS Custom Properties)，顾名思义有着与变量相同的特点。程序设计中的<strong>变量</strong>是可以在一段程序中重复使用，同时可以重复赋值的值(当然，是在不考虑变量作用域的情况下)。</p></blockquote><p>那么CSS变量也就具有重复使用和重新赋值的特性咯，那就把它当成你理解的变量就好了。</p><p><a href="https://caniuse.com/#feat=css-variables" target="_blank" rel="noopener">CSS变量的兼容性</a>，目前Chrome 49、Firefox 42、Safari 9.1和iOS Safari 9.3以上都支持CSS变量。</p><a id="more"></a><h2 id="CSS变量的使用"><a href="#CSS变量的使用" class="headerlink" title="CSS变量的使用"></a>CSS变量的使用</h2><p>如同变量的使用“一样”，我们首先需要<strong>定义</strong>一个CSS变量，变量名称统一使用<code>--</code>开头：</p><p><strong><em>CSS变量区分大小写</em></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">--color</span>: <span class="selector-tag">red</span>;</span><br><span class="line"><span class="selector-tag">--COLOR</span>: <span class="selector-tag">red</span>;</span><br><span class="line"><span class="comment">/*CSS变量对大小写敏感，--color 和 --COLOR 是两个不同的变量*/</span></span><br></pre></td></tr></table></figure><p>这样我们可以定义一个属性值为<code>red</code>的变量<code>--color</code>，在想要将颜色设为red的地方我们这样来使用：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--color);        <span class="comment">/*var()将变量--color解析成属性值，赋值给相应的属性*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>无效的变量定义</em></strong></p><p>声明无意义的变量值，通过<code>var()</code>函数调用后会被解析为初始值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--color</span>: <span class="number">20px</span>;                   <span class="comment">/*无效的定义*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--color);  <span class="comment">/* background-color将回退为初始值transparent */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>使用var()函数时，可以发送第二个参数</em></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">width</span>: <span class="selector-tag">var</span>(<span class="selector-tag">--custom-width</span>, 33%);<span class="comment">/*var()可以接受两个参数，没有找到定义的属性会使用第二个参数值*/</span></span><br></pre></td></tr></table></figure><p><strong><em>可以直接在HTML中使用CSS变量</em></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--HTML--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">style</span>=<span class="string">"--color: red;"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">span &#123;</span><br><span class="line">  color: var(--color); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>可以在其他CSS变量中使用CSS变量</em></strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">--base-red-color</span>: <span class="selector-id">#f00</span>;</span><br><span class="line"><span class="selector-tag">--background-gradient</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">to</span> <span class="selector-tag">top</span>, <span class="selector-tag">var</span>(<span class="selector-tag">--base-red-color</span>), <span class="selector-id">#222</span>);</span><br><span class="line"><span class="comment">/*linear-gradient用于创建一个表示两种或多种颜色线性渐变的图片*/</span></span><br></pre></td></tr></table></figure><p><strong><em>在媒体查询中使用</em></strong></p><blockquote><p>注：在媒体查询不能直接修改在媒体查询作用域外的变量哦，必须在<code>:root</code>重新定义~</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line"><span class="attribute">--padding</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">--color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*在屏幕宽度大于750px以上设备使用*/</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">750px</span>) &#123;</span><br><span class="line"><span class="comment">/*--padding: 30px; */</span>    <span class="comment">/*错误的使用*/</span>          </span><br><span class="line">    </span><br><span class="line">    <span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">        <span class="attribute">--padding</span>: <span class="number">30px</span>;    <span class="comment">/*正确的使用*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">div</span>&#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="built_in">var</span>(--color);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>支持使用calc()函数计算</em></strong></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/calc" target="_blank" rel="noopener">calc()</a>可以在声明CSS属性时使用，返回参数表达式的计算结果</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">--text-input-width</span>: 5000<span class="selector-tag">px</span>;</span><br><span class="line">max-width: calc(var(--text-input-width) / 2);  /*max-width被设置为2500px*/</span><br></pre></td></tr></table></figure><h2 id="全局变量、局部变量、变量继承"><a href="#全局变量、局部变量、变量继承" class="headerlink" title="全局变量、局部变量、变量继承"></a>全局变量、局部变量、变量继承</h2><p>既然有变量的特性，那么也可以声明全局变量和局部变量。所有全局变量的声明都要在<code>:root</code>下，它代表文档的根元素，这样的变量可以在全局使用。此外，在其他地方定义的变量就都是局部变量。</p><p>局部变量只能够在被声明的元素及其子元素中使用。局部变量会覆盖全局变量的属性值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    <span class="attribute">--color</span>: red;           <span class="comment">/*全局变量*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">    <span class="attribute">--color</span>: green;         <span class="comment">/*局部变量*/</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--color);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*当前文档中的span文本都是绿色，而其他文本都是红色*/</span></span><br></pre></td></tr></table></figure><p>与其他CSS属性一样，CSS中的变量也是可以继承的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">  <span class="attribute">--color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">P</span> &#123;</span><br><span class="line">  <span class="attribute">--pColor</span>: green;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--color);    <span class="comment">/*red*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &gt; <span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">color </span>: <span class="built_in">var</span>(-pColor);  <span class="comment">/*使用父定义的变量属性值 green*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用CSS变量修改html元素样式属性"><a href="#使用CSS变量修改html元素样式属性" class="headerlink" title="使用CSS变量修改html元素样式属性"></a>使用CSS变量修改html元素样式属性</h2><p>刚刚提到了CSS变量又叫做CSS自定义属性，那么对CSS属性的操作能否在CSS变量上生效呢？</p><p>我们来修改文档对象<code>--color</code>变量的属性值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.style.setProperty(<span class="string">'--color'</span>, <span class="string">'black'</span>);</span><br></pre></td></tr></table></figure><p>这样会向当前根元素中添加一条行内样式属性，进而改变当前页面使用<code>--color</code>值的属性<strong>(在根元素的属性值会覆盖css中定义的属性值)</strong>：</p><p><img src="https://github.com/cheerforever/MarkDownPhotos/blob/master/CSSVariable_pic1.png?raw=true" alt="行内样式"></p><p>也可以使用js修改元素的属性使用CSS变量定义的属性值(前提是包含CSS变量的定义)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.style.setProperty(<span class="string">'color'</span>, <span class="string">'var(--color)'</span>); </span><br><span class="line"><span class="comment">//保证--color变量已经定义过</span></span><br></pre></td></tr></table></figure><h1 id="CSS变量与CSS预处理器"><a href="#CSS变量与CSS预处理器" class="headerlink" title="CSS变量与CSS预处理器"></a>CSS变量与CSS预处理器</h1><p>原生CSS的使用存在着一些痛点：</p><ul><li><p>语法不够强大，在模块化开发中有许多重复的选择器和属性值。</p></li><li><p>没有合理的样式复用机制，样式的维护和修改通常比较困难。</p></li></ul><p>因此，我们需要一种提供 CSS样式的复用机制、减少冗余代码、提高样式代码可维护性的工具。<strong>CSS预处理器</strong>的诞生解决了这个问题。</p><p><strong>CSS预处理器</strong>将css变成了可编译，可赋变量的形式，我们可以使用预处理器提供的语法生成CSS。<a href="http://sass.bootcss.com/" target="_blank" rel="noopener">Sass</a>是CSS 预处理器的一种，<a href="http://lesscss.org/" target="_blank" rel="noopener">Less</a>和<a href="http://stylus-lang.com/" target="_blank" rel="noopener">Stylus</a>也是比较流行的CSS预处理器。</p><h2 id="Sass、Less和Stylus"><a href="#Sass、Less和Stylus" class="headerlink" title="Sass、Less和Stylus"></a>Sass、Less和Stylus</h2><p>三种CSS预处理器的主要区别：</p><p><img src="https://github.com/cheerforever/MarkDownPhotos/blob/master/Untitled_Diagram.png?raw=true" alt="区别说明"></p><h2 id="CSS变量与CSS预处理器的主要区别"><a href="#CSS变量与CSS预处理器的主要区别" class="headerlink" title="CSS变量与CSS预处理器的主要区别"></a>CSS变量与CSS预处理器的主要区别</h2><p>上文提到的CSS预处理能做到的对CSS的改进优化，CSS变量也同样可以做到。</p><p>此外它还有一些优势：</p><ul><li><p>CSS 变量实际上是 DOM 的一部分，可以访问DOM。例如上文给出的使用JavaScript方法和CSS变量改变DOM样式的例子。</p></li><li><p>它不需要经过任何转译步骤，不需要任何设置就能直接使用，因为它是浏览器原生支持的。</p></li><li><p>CSS预处理器中变量的作用域是静态的，而CSS变量的作用域是动态的。</p></li></ul><blockquote><p>对于CSS预处理器的变量，虽然我们可以在编译过程中改变一个变量的值，但是当它被编译成CSS以后就        是静态的了。而CSS变量则可以响应上下文的变化，我们可以灵活地在媒体查询、各种CSS选择器或者使用JavaScript来修改CSS变量的值，做到在某个作用域下使用修改后的CSS变量属性值。</p></blockquote><p>更多关于Sass预处理器的内容，将会在后续补充。。。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://zhuanlan.zhihu.com/p/27474707" target="_blank" rel="noopener">【译】CSS变量的正确使用方法</a></p><p><a href="https://codeburst.io/css-variables-explained-with-5-examples-84adaffaa5bd" target="_blank" rel="noopener">CSS Variables explained with 5 examples</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做项目换肤功能的过程中，早在项目初期了解的&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CSS变量&lt;/a&gt;终于派上了用场，不得不感叹这真是有意义的发明。本文将总结一下CSS变量的原理与使用方法。&lt;/p&gt;
&lt;h1 id=&quot;CSS变量简介&quot;&gt;&lt;a href=&quot;#CSS变量简介&quot; class=&quot;headerlink&quot; title=&quot;CSS变量简介&quot;&gt;&lt;/a&gt;CSS变量简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CSS变量&lt;/strong&gt;（CSS Variable）又叫 &lt;strong&gt;CSS 自定义属性&lt;/strong&gt;（CSS Custom Properties)，顾名思义有着与变量相同的特点。程序设计中的&lt;strong&gt;变量&lt;/strong&gt;是可以在一段程序中重复使用，同时可以重复赋值的值(当然，是在不考虑变量作用域的情况下)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么CSS变量也就具有重复使用和重新赋值的特性咯，那就把它当成你理解的变量就好了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://caniuse.com/#feat=css-variables&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CSS变量的兼容性&lt;/a&gt;，目前Chrome 49、Firefox 42、Safari 9.1和iOS Safari 9.3以上都支持CSS变量。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://cheerforever.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="CSS" scheme="http://cheerforever.github.io/tags/CSS/"/>
    
  </entry>
  
</feed>
